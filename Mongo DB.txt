Promise:

let myPromise = new Promise((resolve, reject) => {
  let success = true;  // This is a flag for success or failure
  if (success) {
    resolve("Operation successful!");  // If success, resolve with a value
  } else {
    reject("Operation failed.");  // If failure, reject with an error message
  }
});

function fetchData() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      let success = true;
      if (success) {
        resolve("Data fetched successfully!");
      } else {
        reject("Error fetching data.");
      }
    }, 2000);
  });
}

fetchData()
  .then((message) => {
    console.log(message);  // "Data fetched successfully!"
  })
  .catch((error) => {
    console.log(error);  // "Error fetching data."
  });

function fetchData() {
  return new Promise((resolve, reject) => {
    // Simulate a delay for fetching data (e.g., network request)
    setTimeout(() => {
      const success = true; // Set to `false` to simulate an error
      if (success) {
        resolve("Fetched data successfully");
      } else {
        reject("Failed to fetch data");
      }
    }, 1000); // Simulate 1 second delay
  });
}

function processData(data) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const processedData = data + " and processed"; // Example processing
      resolve(processedData);
    }, 1000);
  });
}

function saveData(processedData) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve(processedData + " and saved!"); // Simulating saving the data
    }, 1000);
  });
}

// Example usage with .then()
fetchData()
  .then(data => {
    return processData(data);
  })
  .then(processedData => {
    return saveData(processedData);
  })
  .then(result => {
    console.log('Data saved:', result);
  })
  .catch(error => {
    console.log('Error:', error);
  });

async await:

// The fetchData function remains the same
function fetchData() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const success = true; // Set to `false` to simulate an error
      if (success) {
        resolve("Fetched data successfully");
      } else {
        reject("Failed to fetch data");
      }
    }, 1000); // Simulate 1 second delay
  });
}

// The processData function remains the same
function processData(data) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const processedData = data + " and processed"; // Example processing
      resolve(processedData);
    }, 1000);
  });
}

// The saveData function remains the same
function saveData(processedData) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve(processedData + " and saved!"); // Simulating saving the data
    }, 1000);
  });
}

// Example usage with async/await
async function handleData() {
  try {
    const data = await fetchData();         // Wait for fetchData() to resolve
    const processedData = await processData(data); // Wait for processData() to resolve
    const result = await saveData(processedData); // Wait for saveData() to resolve
    console.log('Data saved:', result);      // Log the result once all promises are resolved
  } catch (error) {
    console.log('Error:', error);           // Catch and log any error from the promises
  }
}

// Call the async function
handleData();


Mongo DB Commands:


create a folder "backend"
npm init -y 
npm install mongodb, mongoose
create db.js file
// Using MongoDB Driver
// const { MongoClient } =  require('mongodb');
// const uri = 'mongodb://localhost:27017/trainer_db';
// async function main(){
//     const client = new MongoClient (uri);
//     try{
//         await client.connect();	
//         console.log('Connected to MongoDB');
//         const database = client.db('trainer_db');
//         const collection = database.collection('trainers');
//         const result = await collection.insertOne({name: 'Alice', age: 25});
//         console.log('Document inserted with _id:', result.insertedId);
//         const documents = await collection.find({}).toArray();
//         console.log('Found documents:', documents);
//     }
//     finally{
//         await client.close();
//     }
// }
// main().catch(console.error);

// Using Mongoose
const mongoose = require('mongoose');
const uri = 'mongodb://localhost:27017/trainer_db';
const userSchema = new mongoose.Schema({
    name:String,
    age:Number
});
const User = mongoose.model('User', userSchema);
async function main(){
    try{
        await mongoose.connect(uri,{useNewUrlParser: true, useUnifiedTopology: true});
        console.log('Connected to MongoDB');
        const user = new User({name:'Alice', age:25});
        await user.save();
        console.log('User saved:', user);
        const users =  await User.find({});
        console.log('Found users:', users);
    }
    finally {
        await mongoose.disconnect();
    }
}
main().catch(console.error);
Perform CRUD Operations:
// Using MongoDB Driver
// const { MongoClient } =  require('mongodb');
// const uri = 'mongodb://localhost:27017/trainer_db';
// async function main(){
//     const client = new MongoClient (uri);
//     try{
//         await client.connect();
//         console.log('Connected to MongoDB');
//         const database = client.db('trainer_db');
//         const collection = database.collection('trainers');
//         const result = await collection.insertOne({name: 'Alice', age: 25});
//         console.log('Document inserted with _id:', result.insertedId);
//         const documents = await collection.find({}).toArray();
//         console.log('Found documents:', documents);
//     }
//     finally{
//         await client.close();
//     }
// }
// main().catch(console.error);

// Using Mongoose
const mongoose = require('mongoose');
const uri = 'mongodb://localhost:27017/trainer_db';
const userSchema = new mongoose.Schema({
    name:String,
    age:Number
});
const User = mongoose.model('User', userSchema);
async function main(){
    try{
        await mongoose.connect(uri,{useNewUrlParser: true, useUnifiedTopology: true});
        console.log('Connected to MongoDB');
        //first User
        const user = new User({name:'Alice', age:25});
        await user.save();
        console.log('User saved:', user);
        const users =  await User.find({});
        console.log('Found users:', users);
        //second user
        const newUser1 = new User({ name: 'John Doe', age: 30 });
        await newUser1.save();
        console.log('User created:', newUser1);
        //third user
        const newUser2 = new User({ name: 'Emily', age: 20 });
        await newUser2.save();
        console.log('User created:', newUser2);
        //Read user by name
        const user1 = await User.findOne({ _id: '6732a156b1e9119ee65dcf1c' });
        console.log('User found:', user1);
        //update a document
        const updateUser = await User.updateOne({_id: '6732a156b1e9119ee65dcf1c'}, {$set:{name:"Emily Martin"}});
        console.log('User updataed:', updateUser);
        const users_updated =  await User.find({});
        console.log('Found users:', users_updated);
        //delete user 
        const deleteUser = await User.deleteMany({name:'Emily'});
        const newUsers4 = await User.find({});
        console.log("users after deletions: ", newUsers4);
    }
    finally {
        await mongoose.disconnect();
    }
}
main().catch(console.error);
